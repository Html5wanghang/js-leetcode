//ÁªôÂÆö‰∏Ä‰∏™ÊéíÂ∫èÈìæË°®ÔºåÂà†Èô§ÊâÄÊúâÂê´ÊúâÈáçÂ§çÊï∞Â≠óÁöÑËäÇÁÇπÔºåÂè™‰øùÁïôÂéüÂßãÈìæË°®‰∏≠ Ê≤°ÊúâÈáçÂ§çÂá∫Áé∞ ÁöÑÊï∞Â≠ó„ÄÇ
//
// Á§∫‰æã 1:
//
// ËæìÂÖ•: 1->2->3->3->4->4->5
//ËæìÂá∫: 1->2->5
//
//
// Á§∫‰æã 2:
//
// ËæìÂÖ•: 1->1->1->2->3
//ËæìÂá∫: 2->3
// Related Topics ÈìæË°®
// üëç 413 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var deleteDuplicates = function(head) {
  let node = new ListNode(0);
  let tempNode = node;
  let headNode = head;
  let set = new Set();
  while (headNode !== null) {
    if (headNode.next !== null) {
      if (headNode.val !== headNode.next.val && !set.has(headNode.val)) {
        tempNode.next = new ListNode(headNode.val);
        tempNode = tempNode.next;
      } else {
        set.add(headNode.val);
      }
    } else {
      if (!set.has(headNode.val)) {
        tempNode.next = new ListNode(headNode.val);
        tempNode = tempNode.next;
      }
    }
    headNode = headNode.next;
  };
  return node.next;
};
//leetcode submit region end(Prohibit modification and deletion)
